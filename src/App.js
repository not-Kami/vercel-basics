import { useState, useEffect } from 'react'; // Importe les hooks React nÃ©cessaires
import './App.css'; // Importe le fichier CSS pour l'application


/* GÃ©nÃ¨re un dÃ©gradÃ© alÃ©atoire */
function randomGradient() {
  // Cette fonction crÃ©e une couleur hexadÃ©cimale alÃ©atoire
  const randHex = () =>
    Math.floor(Math.random() * 0xffffff) // GÃ©nÃ¨re un nombre entre 0 et 16777215 (0xffffff en dÃ©cimal)
      .toString(16) // Convertit en hexadÃ©cimal (base 16)
      .padStart(6, '0'); // Assure que la chaÃ®ne a 6 caractÃ¨res en ajoutant des zÃ©ros si nÃ©cessaire
  
  // Retourne un gradient CSS avec deux couleurs alÃ©atoires
  return `linear-gradient(135deg, #${randHex()}, #${randHex()})`;
}

export default function App() {
  // useState crÃ©e des variables d'Ã©tat qui, lorsqu'elles changent, dÃ©clenchent un re-rendu
  const [fact, setFact] = useState(''); // Ã‰tat pour stocker l'anecdote sur les chats
  const [bg, setBg] = useState(randomGradient()); // Ã‰tat pour stocker le gradient de fond

  /* Charge une anecdote sur les chats et la traduit en franÃ§ais */
  const loadFact = async () => {
    setFact('Chargementâ€¦'); // Affiche un message de chargement pendant la requÃªte
    try {
      // async/await permet d'Ã©crire du code asynchrone de faÃ§on plus lisible

      // 1) on rÃ©cupÃ¨re l'anecdote en anglais depuis l'API catfact.ninja
      const res = await fetch('https://catfact.ninja/fact');
      const { fact: enFact } = await res.json(); // Extrait la propriÃ©tÃ© "fact" et la renomme en "enFact"

      // 2) on appelle l'API MyMemory pour traduire le texte de l'anglais vers le franÃ§ais
      const trRes = await fetch(
        'https://api.mymemory.translated.net/get?' +
        new URLSearchParams({ // Construit les paramÃ¨tres de l'URL proprement
          q: enFact, // Le texte Ã  traduire
          langpair: 'en|fr' // De l'anglais vers le franÃ§ais
        })
      );
      const trData = await trRes.json();
      // RÃ©cupÃ¨re le texte traduit ou garde l'original si la traduction Ã©choue
      const frFact = trData.responseData?.translatedText || enFact;

      // Met Ã  jour l'Ã©tat avec la nouvelle anecdote et un nouveau fond
      setFact(frFact);
      setBg(randomGradient());
    } catch (err) {
      // Gestion des erreurs si une des requÃªtes Ã©choue
      console.error(err);
      setFact("ğŸ˜¿ Impossible de charger la catâ€‘fact en franÃ§ais. RÃ©essayez !");
    }
  };

  // useEffect s'exÃ©cute aprÃ¨s le rendu du composant
  useEffect(() => {
    loadFact(); // Charge une anecdote au chargement initial de la page
  }, []); // Le tableau vide [] signifie "exÃ©cuter une seule fois aprÃ¨s le premier rendu"

  // La partie JSX qui dÃ©finit l'interface utilisateur
  return (
    <div
      className="App"
      style={{
        // Styles inline pour le conteneur principal
        minHeight: '100vh', // Hauteur minimale: 100% de la hauteur de la fenÃªtre
        display: 'flex',
        flexDirection: 'column',
        justifyContent: 'center',
        alignItems: 'center',
        padding: '2rem',
        background: bg, // Utilise le gradient alÃ©atoire stockÃ© dans l'Ã©tat
        color: '#fff',
        textShadow: '0 1px 4px rgba(0,0,0,.6)', // Ombre pour amÃ©liorer la lisibilitÃ© sur fond colorÃ©
      }}
    >
      <h1>Cat Facts  ğŸ˜º</h1>
      <p style={{ maxWidth: 600, fontSize: '1.25rem', lineHeight: 1.4 }}>
        {fact} {/* Affiche l'anecdote stockÃ©e dans l'Ã©tat */}
      </p>
      <button
        onClick={loadFact} // Appelle la fonction loadFact quand on clique sur le bouton
        style={{
          // Styles pour le bouton
          marginTop: '1.5rem',
          padding: '.6rem 1.4rem',
          fontSize: '1rem',
          border: 'none',
          borderRadius: '8px',
          cursor: 'pointer',
          background: '#ffffffbb', // Blanc semi-transparent
          color: '#111',
        }}
      >
        Une autre !
      </button>
    </div>
  );
}
